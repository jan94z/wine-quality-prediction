services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${LOCAL_PORT}:${POSTGRES_PORT}
    volumes:
      - pg_data:/var/lib/postgresql/data
    
  db-init:
    build:
      context: .
      dockerfile: db/Dockerfile
    env_file:
      - .env
    depends_on:
      - db
    restart: "no"

  mlflow:
    build:
      context: .
      dockerfile: mlflow/Dockerfile
    image: ghcr.io/mlflow/mlflow
    environment:
      - MLFLOW_TRACKING_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      --default-artifact-root /mlflow
      --host 0.0.0.0
      --port ${MLFLOW_PORT}
    ports:
      - "${MLFLOW_LOCAL_PORT}:${MLFLOW_PORT}"
    volumes:
      - mlruns:/mlflow
    depends_on:
      - db
      - db-init
    restart: always

  training:
    build:
      context: .
      dockerfile: training/Dockerfile
    env_file:
      - .env
    volumes:
      - mlruns:/app/mlruns
      - model_volume:/app/default_model
    depends_on:
      - db
      - db-init
      - mlflow
    restart: "no"

#   api:
#     build:
#       context: ..
#       dockerfile: ./docker/Dockerfile
#     container_name: wine-quality-api
#     restart: always
#     ports:
#       - "8000:80"
#     environment:
#       - POSTGRES_USER=${POSTGRES_USER}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#       - POSTGRES_DB=${POSTGRES_DB}
#       - POSTGRES_HOST=${POSTGRES_HOST}
#       - POSTGRES_PORT=${POSTGRES_PORT}
#       - JWT_SECRET_KEY=${JWT_SECRET_KEY}
#       - JWT_ALGORITHM=${JWT_ALGORITHM}
#       - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
#       - TEST_USER=${TEST_USER}
#       - TEST_USER_PASSWORD=${TEST_USER_PASSWORD}
#     depends_on:
#       - wine-quality-db-init

volumes:
  pg_data:
  mlruns:
  model_volume:

